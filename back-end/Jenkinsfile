
pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials') // Add this ID in Jenkins
        DOCKERHUB_IMAGE = 'nolawit/laravel-backend'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/nolawit-fant/fullstack-CI-CD.git', branch: 'main'
            }
        }

        stage('Prepare CI Docker Compose') {
            dir('back-end') {
                steps {
                    sh '''
                        # Copy and isolate docker-compose
                        cp docker-compose.yml docker-compose.ci.yml
                        awk '
                            BEGIN { skip=0 }
                            /^  frontend:/ { skip=1; next }
                            skip && /^  [^ ]/ { skip=0 }
                            !skip { print }
                        ' docker-compose.yml > temp.yml
                        mv temp.yml docker-compose.ci.yml

                        # Rename containers to avoid conflicts
                        sed -i 's/container_name: app/container_name: backend_ci_app/' docker-compose.ci.yml
                        sed -i 's/container_name: laravel_db/container_name: backend_ci_laravel_db/' docker-compose.ci.yml
                    '''
                }
            }
        }

        stage('Start Services with Docker Compose') {
            dir('back-end') {
                steps {
                    sh 'docker-compose -f docker-compose.ci.yml down || true'
                    sh 'docker-compose -f docker-compose.ci.yml up -d --build'
                }
            }
        }

        stage('Wait for MySQL to be Ready') {
            steps {
                script {
                    echo 'Waiting for MySQL to be ready...'
                    retry(10) {
                        sh 'sleep 5'
                        sh 'docker exec backend_ci_app bash -c "mysqladmin ping -h backend_ci_laravel_db --silent"'
                    }
                }
            }
        }

        stage('Run Laravel Setup') {
            steps {
                sh '''
                    docker exec backend_ci_app bash -c "
                        cp .env.example .env &&
                        php artisan key:generate &&
                        php artisan migrate
                    "
                '''
            }
        }

        stage('Run Tests') {
            steps {
                sh 'docker exec backend_ci_app bash -c "php artisan test || true"'
            }
        }

        stage('Push Image to Docker Hub') {
            steps {
                script {
                    def imageTag = "${DOCKERHUB_IMAGE}:latest"
                    sh """
                        docker tag ci-cd-test_app ${imageTag}
                        echo "${DOCKERHUB_CREDENTIALS_PSW}" | docker login -u "${DOCKERHUB_CREDENTIALS_USR}" --password-stdin
                        docker push ${imageTag}
                    """
                }
            }
        }
    }

    post {
        always {
            dir('back-end') {
                sh 'docker-compose -f docker-compose.ci.yml down || true'
            }
        }
    }
}
