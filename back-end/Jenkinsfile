
pipeline {
    agent any

    environment {
        COMPOSE_PROJECT_NAME = "ci-cd-test"
        BACKEND_DIR = "back-end"
        COMPOSE_FILE = "docker-compose.ci.yml"  // Temporary file for CI
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/nolawit-fant/fullstack-CI-CD.git'
            }
        }

        stage('Prepare CI Docker Compose') {
            steps {
                dir("${BACKEND_DIR}") {
                    sh '''
                        # Copy original docker-compose.yml to temporary file
                        cp docker-compose.yml ${COMPOSE_FILE}

                        # Remove frontend service block from temporary file
                        awk '
                            BEGIN { skip=0 }
                            /^  frontend:/ { skip=1; next }
                            skip && /^  [^ ]/ { skip=0 }
                            !skip { print }
                        ' docker-compose.yml > temp.yml && mv temp.yml ${COMPOSE_FILE}

                        # Replace container names with prefixed names in temporary file
                        sed -i 's/container_name: app/container_name: backend_ci_app/' ${COMPOSE_FILE}
                        sed -i 's/container_name: laravel_db/container_name: backend_ci_laravel_db/' ${COMPOSE_FILE}
                    '''
                }
            }
        }

        stage('Start Services with Docker Compose') {
            steps {
                dir("${BACKEND_DIR}") {
                    sh "docker-compose -f ${COMPOSE_FILE} down || true"
                    sh "docker-compose -f ${COMPOSE_FILE} up -d --build"
                }
            }
        }

        stage('Wait for MySQL to be Ready') {
            steps {
                script {
                    echo "Waiting for MySQL to be ready..."
                    sh '''
                        for i in {1..30}; do
                            docker exec backend_ci_app bash -c 'mysqladmin ping -h backend_ci_laravel_db --silent'
                            if [ $? -eq 0 ]; then
                                echo "MySQL is up!"
                                break
                            fi
                            echo "Waiting... ($i)"
                            sleep 2
                        done
                    '''
                }
            }
        }

        stage('Run Laravel Setup') {
            steps {
                dir("${BACKEND_DIR}") {
                    sh '''
                        docker exec backend_ci_app cp .env.example .env || true
                        docker exec backend_ci_app php artisan key:generate
                        docker exec backend_ci_app php artisan migrate --force
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir("${BACKEND_DIR}") {
                    sh "docker exec backend_ci_app ./vendor/bin/phpunit"
                }
            }
        }
    }

    post {
        always {
            dir("${BACKEND_DIR}") {
                sh "docker-compose -f ${COMPOSE_FILE} down"
            }
        }
    }
}
